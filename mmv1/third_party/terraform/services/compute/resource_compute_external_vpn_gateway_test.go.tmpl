package compute_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeExternalVPNGateway_updateLabels(t *testing.T) {
	t.Parallel()

	rnd := acctest.RandString(t, 10)
	resourceName := "google_compute_external_vpn_gateway.external_gateway"

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeExternalVPNGateway_updateLabels(rnd, "test", "test"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "labels.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "labels.test", "test"),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "terraform_labels"},
			},
			{
				Config: testAccComputeExternalVPNGateway_updateLabels(rnd, "test-updated", "test-updated"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "labels.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "labels.test-updated", "test-updated"),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "terraform_labels"},
			},
		},
	})
}

func testAccComputeExternalVPNGateway_updateLabels(suffix, key, value string) string {
	return fmt.Sprintf(`
resource "google_compute_external_vpn_gateway" "external_gateway" {
  name            = "tf-test-external-gateway-%s"
  redundancy_type = "SINGLE_IP_INTERNALLY_REDUNDANT"
  description     = "An externally managed VPN gateway"
  interface {
    id         = 0
    ip_address = "8.8.8.8"
  }

  labels = {
    %s = "%s"
  }
}
`, suffix, key, value)
}

func TestAccComputeExternalVPNGateway_insertIpv6Address(t *testing.T) {
	t.Parallel()

	rnd := acctest.RandString(t, 10)
	resourceName := "google_compute_external_vpn_gateway.external_gateway"

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: computeExternalVPNGatewayIpv6AddressConfig(rnd, "2001:db8:abcd:1234:5678:90ab:cdef:1234"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "interface.0.ipv6_address", "2001:db8:abcd:1234:5678:90ab:cdef:1234"),
				),
			},
			{
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func computeExternalVPNGatewayIpv6AddressConfig(suffix, ipv6_address string) string {
	return fmt.Sprintf(`
resource "google_compute_external_vpn_gateway" "external_gateway" {
  name            = "tf-test-external-gateway-%s"
  redundancy_type = "SINGLE_IP_INTERNALLY_REDUNDANT"
  description     = "An externally managed VPN gateway"
  interface {
    id           = 0
    ipv6_address = "%s"
  }
}
`, suffix, ipv6_address)
}



{{- if ne $.TargetVersionName "ga" }}
func TestAccComputeExternalVpnGateway_resourceManagerTags(t *testing.T) {
	t.Parallel()
	org := envvar.GetTestOrgFromEnv(t)
	project := envvar.GetTestProjectFromEnv()

	suffixName := acctest.RandString(t, 10)
	tagKeyResult := acctest.BootstrapSharedTestTagKeyDetails(t, "crm-ext-gw-tagkey", "organizations/"+org, make(map[string]interface{}))
	sharedTagkey,_ := tagKeyResult["shared_tag_key"]
	tagValueResult := acctest.BootstrapSharedTestTagValueDetails(t, "crm-ext-gw-tagvalue", sharedTagkey, org)
	externalVpnGatewayName := fmt.Sprintf("tf-test-external-vpn-gateway-resource-manager-tags-%s", suffixName)
	context := map[string]interface{}{
		"project": project,
		"external_vpn_gateway_name": externalVpnGatewayName,
		"tag_key_id": tagKeyResult["name"],
		"tag_value_id": tagValueResult["name"],
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeExternalVpnGateway_resourceManagerTags(context),
			},
			{
				ResourceName:      "google_compute_external_vpn_gateway.foobar",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateVerifyIgnore: []string{"params"},
			},
		},
	})
}

func testAccComputeExternalVpnGateway_resourceManagerTags(context map[string]interface{}) string {
	return acctest.Nprintf(`
		resource "google_compute_external_vpn_gateway" "foobar" {
			provider = google-beta
			name = "%{external_vpn_gateway_name}"
			redundancy_type = "SINGLE_IP_INTERNALLY_REDUNDANT"
			description = "An external VPN gateway with resource manager tags"
			interface {
				id = 0
				ip_address = "1.2.3.4"
			}
			params {
				resource_manager_tags = {
					"%{tag_key_id}" = "%{tag_value_id}"
				}
			}
		}
		`, context)
}
{{- end }}