package compute_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	
	{{- if ne $.TargetVersionName "ga" }}
	"github.com/hashicorp/terraform-provider-google/google/envvar"
	{{- end }}
)

func TestAccComputeHaVpnGateway_updateLabels(t *testing.T) {
	t.Parallel()

	rnd := acctest.RandString(t, 10)
	resourceName := "google_compute_ha_vpn_gateway.ha_gateway1"

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeHaVpnGateway_updateLabels(rnd, "test", "test"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "labels.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "labels.test", "test"),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "terraform_labels"},
			},
			{
				Config: testAccComputeHaVpnGateway_updateLabels(rnd, "testupdated", "testupdated"),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction("google_compute_ha_vpn_gateway.ha_gateway1", plancheck.ResourceActionUpdate),
					},
				},
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "labels.%", "1"),
					resource.TestCheckResourceAttr(resourceName, "labels.testupdated", "testupdated"),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"labels", "terraform_labels"},
			},
		},
	})
}

{{- if ne $.TargetVersionName "ga" }}
func TestAccComputeHaVpnGateway_resourceManagerTags(t *testing.T) {
	t.Parallel()
	org := envvar.GetTestOrgFromEnv(t)
	tagKeyResult := acctest.BootstrapSharedTestTagKeyDetails(t, "crm-routers-tagkey", "organizations/"+org, make(map[string]interface{}))
	sharedTagkey, _ := tagKeyResult["shared_tag_key"]
	tagValueResult := acctest.BootstrapSharedTestTagValueDetails(t, "crm-routers-tagvalue", sharedTagkey, org)
	rnd := acctest.RandString(t, 10)
	context := map[string]interface{}{
		"rnd":          rnd,
		"tag_key_id":   tagKeyResult["name"],
		"tag_value_id": tagValueResult["name"],
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeHaVpnGateway_resourceManagerTags(context),
			},
			{
				ResourceName:            "google_compute_ha_vpn_gateway.ha_gateway1",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"params"},
			},
		},
	})
}
{{- end }}

{{- if ne $.TargetVersionName "ga" }}
func testAccComputeHaVpnGateway_resourceManagerTags(context map[string]interface{}) string {
	return acctest.Nprintf(`
resource "google_compute_ha_vpn_gateway" "ha_gateway1" {
  provider = google-beta
  region   = "us-central1"
  name     = "tf-test-ha-vpn-1%{rnd}"
  network  = google_compute_network.network1.id
  params {
    resource_manager_tags = {
      "%{tag_key_id}" = "%{tag_value_id}"
    }
  }
}
resource "google_compute_network" "network1" {
  provider = google-beta
  name                    = "network1%{rnd}"
  auto_create_subnetworks = false
}
`, context)
}
{{- end }}

func testAccComputeHaVpnGateway_updateLabels(suffix, key, value string) string {
	return fmt.Sprintf(`
resource "google_compute_ha_vpn_gateway" "ha_gateway1" {
  region   = "us-central1"
  name     = "tf-test-ha-vpn-1%s"
  network  = google_compute_network.network1.id
  labels = {
    %s = "%s"
  }
}
resource "google_compute_network" "network1" {
  name                    = "network1%s"
  auto_create_subnetworks = false
}
`, suffix, key, value, suffix)
}
