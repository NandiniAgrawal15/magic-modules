package compute_test
{{- if ne $.TargetVersionName "ga" }}
import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-provider-google/google/acctest"
	"github.com/hashicorp/terraform-provider-google/google/envvar"
)

func TestAccComputeVpnGateway_resourceManagerTags(t *testing.T) {
	t.Parallel()
	org := envvar.GetTestOrgFromEnv(t)

    tagKeyResult := acctest.BootstrapSharedTestTagKeyDetails(t, "crm-vpn-gateway-tagkey", "organizations/"+org, make(map[string]interface{}))
	sharedTagkey,_ := tagKeyResult["shared_tag_key"]
	tagValueResult := acctest.BootstrapSharedTestTagValueDetails(t, "crm-vpn-gateway-tagvalue", sharedTagkey, org)

	vpnGatewayName := fmt.Sprintf("tf-test-%s", acctest.RandString(t, 10))

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy: resource.ComposeTestCheckFunc(
			testAccCheckComputeVpnGatewayDestroyProducer(t),
			testAccCheckComputeNetworkDestroyProducer(t),
		),
		Steps: []resource.TestStep{
			{
				Config: testAccComputeVpnGateway_resourceManagerTags(vpnGatewayName, tagKeyResult["name"], tagValueResult["name"]),
			},
			{
				ResourceName:            "google_compute_vpn_gateway.foobar",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"params"},
			},
		},
	})
}

func testAccComputeVpnGateway_resourceManagerTags(name, tagKey, tagValue string) string {
	return fmt.Sprintf(`
	resource "google_compute_network" "default" {
		name                    = "tf-test-network-for-%s"
		auto_create_subnetworks = false
	}

	resource "google_compute_vpn_gateway" "foobar" {
		name        = "%s"
		description = "my-description"
		network     = google_compute_network.default.name
		params {
			resource_manager_tags = {
				"%s" = "%s"
			}
		}
	}
	`, name, name, tagKey, tagValue)
}
{{- end }}